import streamlit as st
from ...core.transcript import TranscriptExtractor
from ...core.storage import DataStorage
from ...core.playlist import PlaylistHandler
from ...utils.error_handler import ErrorHandler

class VideoProcessor:
    def __init__(self, transcript_extractor, data_storage, error_handler, playlist_handler):
        self.transcript_extractor = transcript_extractor
        self.data_storage = data_storage
        self.error_handler = error_handler
        self.playlist_handler = playlist_handler
        
    def process_video(self, video, playlist_id, language, video_status_container):
        """X·ª≠ l√Ω m·ªôt video ri√™ng l·∫ª"""
        try:
            transcript_data = self.transcript_extractor.download_transcript(
                video['video_id'],
                video['title'],
                language
            )
            
            if transcript_data:
                if self.data_storage.save_transcript(
                    playlist_id,
                    video['video_id'],
                    video['title'],
                    transcript_data
                ):
                    video['status'] = 'success'
                    return True
            
            return False
                
        except Exception as e:
            st.session_state.results['error_logs'].append({
                'video_id': video['video_id'],
                'title': video['title'],
                'error': str(e),
                'is_retry': False
            })
            video['status'] = 'failed'
            return False

    def process_playlist(self, playlist_url: str, language: str, retry_videos=None):
        """X·ª≠ l√Ω to√†n b·ªô playlist"""
        try:
            self.error_handler.log_info("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω playlist...")
            
            # N·∫øu l√† retry th√¨ d√πng videos ƒë√£ c√≥
            if retry_videos:
                videos = retry_videos
                playlist_id = st.session_state.results['playlist_id']
            else:
                # L·∫•y th√¥ng tin playlist
                playlist_info = self.playlist_handler.get_playlist_info(playlist_url)
                if not playlist_info:
                    st.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin playlist")
                    return
                    
                playlist_id = playlist_info['id']
                videos = self.playlist_handler.get_playlist_videos(playlist_url)
                
                # C·∫≠p nh·∫≠t session state
                st.session_state.results.update({
                    'playlist_id': playlist_id,
                    'playlist_title': playlist_info['title'],
                    'playlist_uploader': playlist_info['channel']
                })
            
            total_videos = len(videos)
            self.error_handler.log_info(f"T√¨m th·∫•y {total_videos} video")
            
            # T·∫°o container cho progress bar v√† status
            progress_container = st.container()
            with progress_container:
                progress_text = st.empty()
                progress_bar = st.progress(0)
                current_video_container = st.empty()  # Container cho t√™n video hi·ªán t·∫°i
                stats_container = st.empty()  # Container cho th·ªëng k√™
            
            success_count = 0
            failed_count = 0
            
            # X·ª≠ l√Ω t·ª´ng video
            for i, video in enumerate(videos):
                current = i + 1
                progress = current / total_videos
                
                # C·∫≠p nh·∫≠t progress bar v√† text
                progress_bar.progress(progress)
                progress_text.write(f"‚è≥ ƒêang x·ª≠ l√Ω: {current}/{total_videos} videos ({int(progress * 100)}%)")
                
                # Hi·ªÉn th·ªã t√™n video ƒëang x·ª≠ l√Ω
                current_video_container.info(f"üé• Video hi·ªán t·∫°i: {video['title']}")
                
                # X·ª≠ l√Ω video v√† c·∫≠p nh·∫≠t th·ªëng k√™
                if self.process_video(video, playlist_id, language, None):  # Truy·ªÅn None cho video_status_container
                    success_count += 1
                else:
                    failed_count += 1
                    st.session_state.results['failed_videos'].append(video)
                
                # C·∫≠p nh·∫≠t s·ªë li·ªáu trong m·ªôt d√≤ng
                stats_container.info(f"‚úÖ Th√†nh c√¥ng: {success_count}/{total_videos} | ‚ùå Th·∫•t b·∫°i: {failed_count}/{total_videos}")
            
            # X√≥a container t√™n video sau khi ho√†n th√†nh
            current_video_container.empty()
            
            # C·∫≠p nh·∫≠t k·∫øt qu·∫£ cu·ªëi c√πng
            st.session_state.results.update({
                'success_count': success_count,
                'failed_count': failed_count,
                'videos': videos,
                'total_videos': total_videos
            })
            st.session_state.processing_complete = True
            st.session_state.show_retry = failed_count > 0
            
            # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
            if success_count == total_videos:
                st.success(f"‚ú® Ho√†n th√†nh! ƒê√£ t·∫£i th√†nh c√¥ng {success_count}/{total_videos} transcripts")
            else:
                st.warning(f"‚ö†Ô∏è ƒê√£ ho√†n th√†nh v·ªõi {success_count}/{total_videos} transcripts th√†nh c√¥ng")
                
            self.error_handler.log_info("ƒê√£ ho√†n th√†nh x·ª≠ l√Ω playlist")
            
        except Exception as e:
            self.error_handler.log_error("Playlist Processing Error", str(e))
            st.error(f"L·ªói khi x·ª≠ l√Ω playlist: {str(e)}")

    def retry_failed_videos(self):
        """Th·ª≠ l·∫°i c√°c video b·ªã l·ªói"""
        st.session_state.show_retry = False
        prev_success = st.session_state.results['success_count']
        prev_failed = st.session_state.results['failed_count']
        
        self.process_playlist(None, None, st.session_state.results['failed_videos'])
        
        if 'success_count' in st.session_state.results:
            st.session_state.results['success_count'] = prev_success + st.session_state.results['success_count']
            st.session_state.results['failed_count'] = prev_failed - st.session_state.results['success_count'] 